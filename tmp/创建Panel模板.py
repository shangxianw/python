

className = input("in something");

s1 = ""

s1 += "module game \n"
s1 += "{\n"
s1 += "    export class " + className + "C extends UICtrlBase\n"
s1 += "    {\n"
s1 += "        public constructor()\n"
s1 += "        {\n"
s1 += "            super();\n"
s1 += "        }\n"
s1 += "\n"
s1 += "        ////////////////////////////////////////////////////////////////////////////////////////////////\n"
s1 += "        //声明界面要引用的资源组 一定要有 公共资源不需要引用\n"
s1 += "        protected GetResGroup():string[]\n"
s1 += "        {\n"
s1 += "             return [];\n"
s1 += "        }\n"
s1 += "        //声明父窗口 可以没有 默认是panelLayer\n"
s1 += "        protected GetParent():any\n"
s1 += "        {\n"
s1 += "            return GameLayerManager.gameLayer().panelLayer;\n"
s1 += "        }\n"
s1 += "        //声明要实例化的EXML类 一定要有!!!\n"
s1 += "        protected GetPanelClass():any\n"
s1 += "        {\n"
s1 += "            return " + className + ";\n"
s1 += "        }\n"
s1 += "        /////////////////////////////////////////////////////////////////////////////////////////////////////\n"
s1 += "\n"
s1 += "        public OnMessage(itype:number, data:any): void\n"
s1 += "        {\n"
s1 += "            super.OnMessage(itype, data);\n"
s1 += "            if(itype == PanelMessageType.OnShow)\n"
s1 += "            {\n"
s1 += "                this.ShowUI(false, 0, 0, 0, false, true, data);\n"
s1 += "            }\n"
s1 += "            else if(itype == PanelMessageType.OnHide)\n"
s1 += "            {\n"
s1 += "                this.ClosePanel(4);\n"
s1 += "            }\n"
s1 += "            else if(itype == PanelMessageType.OnDestroy)\n"
s1 += "            {\n"
s1 += "                this.DestroyPanel();\n"
s1 += "            }\n"
s1 += "        }\n"
s1 += "\n"
s1 += "        protected Destroy()\n"
s1 += "        {\n"
s1 += "\n"
s1 += "        }\n"
s1 += "    }\n"
s1 += "}"

classFileName = "./" + className + "C.ts";
with open(classFileName, "w", encoding="utf-8") as f:
	f.write(s1);



s2 =  ""
s2 += "module game\n"
s2 += "{\n"
s2 += "    export class HeroInfoPanelData extends DataBase\n"
s2 += "    {\n"
s2 += "        public Destroy()\n"
s2 += "        {\n"
s2 += "\n"
s2 += "        }\n"
s2 += "\n"
s2 += "        public PackData(heroId: number)\n"
s2 += "        {\n"
s2 += "            return this;\n"
s2 += "        }\n"
s2 += "        }\n"
s2 += "\n"
s2 += "    export class HeroInfoPanel extends UIComponentBase\n"
s2 += "    {\n"
s2 += "        public info:HeroInfoPanelData;\n"
s2 += "        public constructor()\n"
s2 += "        {\n"
s2 += "            super('HeroInfoPanel2Skin', true);\n"
s2 += "        }\n"
s2 += "\n"
s2 += "        public InitData(data:HeroInfoPanelData)\n"
s2 += "        {\n"
s2 += "\n"
s2 += "        }\n"
s2 += "\n"
s2 += "        public Destroy()\n"
s2 += "        {\n"
s2 += "\n"
s2 += "        }\n"
s2 += "    }\n"
s2 += "}\n"

classFileName = "./" + className + ".ts";
with open(classFileName, "w", encoding="utf-8") as f:
	f.write(s1);